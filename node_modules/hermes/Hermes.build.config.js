/**
 * This file/module contains all configuration for the hermes build process.
 */
module.exports = {
 
  injectSettings: function(userConfig, environment){
      userConfig.hermes_files = {
        developmentSettings:['src/app/Main/Settings/Development/*'],
        productionSettings:['src/app/Main/Settings/Production/*']
      };
      
      var selectedEnvironmentTasks = this.environmentTasks[environment];
      if(selectedEnvironmentTasks === undefined){
        console.error("Hermes: environment "+environment+" has no defined tasks");
        return;
      }

      if(userConfig.vendor_files.unuglifiable){
        if(selectedEnvironmentTasks.uglify){
          userConfig.vendor_files.css = userConfig.vendor_files.css.concat(userConfig.vendor_files.unuglifiable);
          
        }
        else{
          userConfig.vendor_files.js = userConfig.vendor_files.js.concat(userConfig.vendor_files.unuglifiable);
        }
      }
      
  },
  
  tasks: {
	  
	  production: {
        files: [
          { 

            src: ['<%= hermes_files.productionSettings %>'],
            dest: '<%= build_dir %>/assets/',
            cwd: '.',
            expand: true,
            flatten: true
          }
       ]   
      },
      development:{
        files: [
          { 
            
            src: ['<%= hermes_files.developmentSettings %>'],
            dest: '<%= build_dir %>/assets/',
            cwd: '.',
            expand: true,
            flatten: true
          }
       ]   
      }
  },
  
  environmentTasks:{
	  "production":{
      "files": ['development' ,'production'],
      "uglify": true,
      "test": false
    },
	  "development":{
      "files": ['development'],
      "uglify": true,
      "test": true
    }
  },
  
  injectHermesTasksIntoTask: function(taskConfig, taskToInjectInto, environment, buildTasks, compileTasks){
    
    var selectedEnvironmentTasks = this.environmentTasks[environment];
    if(selectedEnvironmentTasks === undefined){
      console.error("Hermes: environment "+environment+" has no defined tasks");
      return;
    }

    //console.log(selectedEnvironmentTasks);
    for(var i=0; i<selectedEnvironmentTasks.files.length; i++){
      var currentTask = this.tasks[selectedEnvironmentTasks.files[i]];
      
      taskConfig.copy[taskToInjectInto].files = taskConfig.copy[taskToInjectInto].files.concat(currentTask.files);
    }

    if(selectedEnvironmentTasks.uglify){
      
      compileTasks.push.apply(compileTasks,['uglify',
      'index:compile', 'clean:build','copy:bin_to_build']);
    }
    else{
      compileTasks.push.apply(compileTasks,['index:compile']);
    }

    if(selectedEnvironmentTasks.test){      
      buildTasks.push.apply(buildTasks,['karma:continuous']);
    }

    //console.log(taskConfig.copy[taskToInjectInto].files);
  }
  
};
